// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Culori from "./Culori.res.mjs";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as ColorMath from "./ColorMath.res.mjs";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PaletteGeneration from "./PaletteGeneration.res.mjs";

function hexToRgb(hex) {
  try {
    var cleanHex = Js_string.startsWith(hex, "#") ? hex.slice(1, hex.length) : hex;
    if (cleanHex.length !== 6) {
      return {
              r: 0.0,
              g: 0.0,
              b: 0.0
            };
    }
    var r = Belt_Int.fromString("0x" + cleanHex.slice(0, 2));
    var g = Belt_Int.fromString("0x" + cleanHex.slice(2, 4));
    var b = Belt_Int.fromString("0x" + cleanHex.slice(4, 6));
    if (r !== undefined) {
      if (g !== undefined) {
        if (b !== undefined) {
          return {
                  r: r,
                  g: g,
                  b: b
                };
        } else {
          return {
                  r: 0.0,
                  g: 0.0,
                  b: 0.0
                };
        }
      } else {
        return {
                r: 0.0,
                g: 0.0,
                b: 0.0
              };
      }
    } else {
      return {
              r: 0.0,
              g: 0.0,
              b: 0.0
            };
    }
  }
  catch (exn){
    return {
            r: 0.0,
            g: 0.0,
            b: 0.0
          };
  }
}

function padHex(str) {
  if (str.length === 1) {
    return "0" + str;
  } else {
    return str;
  }
}

function rgbToHex(rgb) {
  var toHexStr = function (value) {
    var intVal = value | 0;
    var hexDigits = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f"
    ];
    var high = hexDigits[intVal / 16 | 0];
    var low = hexDigits[intVal % 16];
    return high + low;
  };
  var r = toHexStr(rgb.r);
  var g = toHexStr(rgb.g);
  var b = toHexStr(rgb.b);
  return "#" + r + g + b;
}

function analyzeColorAI(baseColor) {
  try {
    var color = Culori.parseToOklch(baseColor);
    var oklchCoords = Culori.getOklchCoords(color);
    var l = oklchCoords[0];
    var c = oklchCoords[1];
    var h = oklchCoords[2];
    var saturation = c * 2.5 | 0;
    var score = 50.0;
    var suggestions = [];
    var harmony = [];
    if (saturation < 0.3) {
      suggestions.push("Consider increasing saturation for better visual impact");
      score = score - 10.0;
    } else if (saturation > 0.8) {
      suggestions.push("High saturation detected - ensure it works across different backgrounds");
    } else {
      score = score + 15.0;
    }
    if (l < 0.2) {
      suggestions.push("Very dark color - ensure sufficient contrast with dark backgrounds");
    } else if (l > 0.8) {
      suggestions.push("Very light color - ensure sufficient contrast with light backgrounds");
    } else {
      score = score + 15.0;
    }
    if (h >= 0.0 && h < 30.0) {
      harmony.push("Warm red tones - energetic and attention-grabbing");
    } else if (h >= 30.0 && h < 90.0) {
      harmony.push("Yellow-orange tones - optimistic and creative");
    } else if (h >= 90.0 && h < 150.0) {
      harmony.push("Green tones - trustworthy and natural");
    } else if (h >= 150.0 && h < 210.0) {
      harmony.push("Blue tones - professional and calm");
    } else if (h >= 210.0 && h < 270.0) {
      harmony.push("Purple tones - creative and luxurious");
    } else {
      harmony.push("Cool red tones - passionate and bold");
    }
    var baseColorRgb = hexToRgb(baseColor);
    var contrastWhite = ColorMath.contrastRatio(baseColorRgb, {
          r: 255.0,
          g: 255.0,
          b: 255.0
        });
    var contrastBlack = ColorMath.contrastRatio(baseColorRgb, {
          r: 0.0,
          g: 0.0,
          b: 0.0
        });
    var maxContrast = Math.max(contrastWhite, contrastBlack) | 0;
    var accessibility;
    if (maxContrast >= 7.0) {
      score = score + 20.0;
      accessibility = "good";
    } else if (maxContrast >= 4.5) {
      score = score + 10.0;
      suggestions.push("Fair contrast - consider adjusting for better accessibility");
      accessibility = "fair";
    } else {
      suggestions.push("Poor contrast - significantly impacts accessibility");
      accessibility = "poor";
    }
    var finalScore = Math.max(0.0, Math.min(100.0, score));
    return {
            score: finalScore,
            suggestions: suggestions,
            properties: {
              saturation: saturation,
              lightness: l,
              hue: h,
              accessibility: accessibility,
              harmony: harmony
            }
          };
  }
  catch (exn){
    return {
            score: 0.0,
            suggestions: ["Invalid color format - please provide a valid color"],
            properties: {
              saturation: 0.0,
              lightness: 0.0,
              hue: 0.0,
              accessibility: "poor",
              harmony: ["Color analysis failed"]
            }
          };
  }
}

function generateHarmonyPalette(baseColor, harmony) {
  try {
    var color = Culori.parseToOklch(baseColor);
    var oklchCoords = Culori.getOklchCoords(color);
    var h = oklchCoords[2];
    var l = oklchCoords[0];
    var c = oklchCoords[1];
    if (harmony === "analogous") {
      var color1 = Culori.oklchToHex(l, c, (h - 30.0) % 360.0);
      var color3 = Culori.oklchToHex(l, c, (h + 30.0) % 360.0);
      var color4 = Culori.oklchToHex(l * 1.1, c * 0.8, (h - 15.0) % 360.0);
      var color5 = Culori.oklchToHex(l * 0.9, c * 0.8, (h + 15.0) % 360.0);
      return [
              color1,
              baseColor,
              color3,
              color4,
              color5
            ];
    }
    if (harmony === "triadic") {
      var triadic1 = Culori.oklchToHex(l, c, (h + 120.0) % 360.0);
      var triadic2 = Culori.oklchToHex(l, c, (h + 240.0) % 360.0);
      return [
              baseColor,
              triadic1,
              triadic2
            ];
    }
    if (harmony === "monochromatic") {
      var lighter1 = Culori.oklchToHex(Math.min(0.95, l + 0.2), c, h);
      var lighter2 = Culori.oklchToHex(Math.min(0.9, l + 0.1), c, h);
      var darker1 = Culori.oklchToHex(Math.max(0.1, l - 0.1), c, h);
      var darker2 = Culori.oklchToHex(Math.max(0.05, l - 0.2), c, h);
      return [
              lighter1,
              lighter2,
              baseColor,
              darker1,
              darker2
            ];
    }
    var complementary = Culori.oklchToHex(l, c, (h + 180.0) % 360.0);
    return [
            baseColor,
            complementary
          ];
  }
  catch (exn){
    return [baseColor];
  }
}

function validateAccessibility(foreground, background, levelOpt, param) {
  var level = levelOpt !== undefined ? levelOpt : "AA";
  var foregroundRgb = hexToRgb(foreground);
  var backgroundRgb = hexToRgb(background);
  var contrast = ColorMath.contrastRatio(foregroundRgb, backgroundRgb);
  var required = level === "AAA" ? 7.0 : 4.5;
  return {
          isValid: contrast >= required,
          contrast: contrast,
          required: required
        };
}

function generateAccessibleCombination(backgroundColor, textColorOpt, param) {
  var textColor = textColorOpt !== undefined ? Caml_option.valFromOption(textColorOpt) : undefined;
  try {
    var bgColor = Culori.parseToOklch(backgroundColor);
    var bgCoords = Culori.getOklchCoords(bgColor);
    var bgLightness = bgCoords[0];
    var suggestedTextColor = bgLightness > 0.5 ? "#000000" : "#FFFFFF";
    var finalTextColor = textColor !== undefined ? textColor : suggestedTextColor;
    var finalTextRgb = hexToRgb(finalTextColor);
    var backgroundRgb = hexToRgb(backgroundColor);
    var contrast = ColorMath.contrastRatio(finalTextRgb, backgroundRgb);
    return {
            background: backgroundColor,
            text: finalTextColor,
            contrast: contrast
          };
  }
  catch (exn){
    return {
            background: backgroundColor,
            text: "#000000",
            contrast: 1.0
          };
  }
}

function generateSemanticColorsAI(brandColors) {
  var reasoning = {};
  var accessibility = {};
  var success = "#10b981";
  reasoning["success"] = "Green is universally recognized for success and positive actions";
  accessibility["success"] = validateAccessibility(success, "#FFFFFF", undefined, undefined).isValid;
  var warning = "#f59e0b";
  reasoning["warning"] = "Amber provides good contrast and is associated with caution";
  accessibility["warning"] = validateAccessibility(warning, "#FFFFFF", undefined, undefined).isValid;
  var error = "#ef4444";
  reasoning["error"] = "Red is instinctively associated with errors and danger";
  accessibility["error"] = validateAccessibility(error, "#FFFFFF", undefined, undefined).isValid;
  var info = brandColors.primary;
  reasoning["info"] = "Using brand primary color for informational messages maintains consistency";
  accessibility["info"] = validateAccessibility(info, "#FFFFFF", undefined, undefined).isValid;
  var primaryColor = Culori.parseToOklch(brandColors.primary);
  var primaryCoords = Culori.getOklchCoords(primaryColor);
  var neutral;
  try {
    var h = primaryCoords[2];
    neutral = Culori.oklchToHex(0.5, 0.05, h);
  }
  catch (exn){
    neutral = "#6b7280";
  }
  reasoning["neutral"] = "Neutral tone derived from brand color for subtle elements";
  accessibility["neutral"] = validateAccessibility(neutral, "#FFFFFF", undefined, undefined).isValid;
  return {
          semantic: {
            success: success,
            warning: warning,
            error: error,
            info: info,
            neutral: neutral
          },
          reasoning: reasoning,
          accessibility: accessibility
        };
}

function suggestBrandColorsAI(baseColor) {
  var currentAnalysis = analyzeColorAI(baseColor);
  var suggestions = [];
  var trends = [];
  var alternatives = [
    "#6366f1",
    "#10b981",
    "#f59e0b",
    "#ef4444"
  ];
  try {
    var color = Culori.parseToOklch(baseColor);
    var oklchCoords = Culori.getOklchCoords(color);
    var h = oklchCoords[2];
    var l = oklchCoords[0];
    var c = oklchCoords[1];
    if (c > 0.25) {
      trends.push("High saturation colors are trending in 2024");
    }
    if (l > 0.6) {
      trends.push("Light, airy palettes are popular");
    }
    if (h >= 200.0 && h <= 250.0) {
      trends.push("Blue tones are consistently professional");
    }
    var complementary = Culori.oklchToHex(l, c, (h + 180.0) % 360.0);
    suggestions.push({
          color: complementary,
          reasoning: "Complementary color creates visual balance and harmony",
          confidence: 0.85,
          category: "secondary"
        });
    var analogous1 = Culori.oklchToHex(l, c, (h + 30.0) % 360.0);
    suggestions.push({
          color: analogous1,
          reasoning: "Analogous color maintains harmony while adding variety",
          confidence: 0.75,
          category: "accent"
        });
    var analogous2 = Culori.oklchToHex(l, c, (h - 30.0) % 360.0);
    suggestions.push({
          color: analogous2,
          reasoning: "Creates a cohesive color family",
          confidence: 0.75,
          category: "accent"
        });
    if (currentAnalysis.properties.accessibility === "poor") {
      var improved = Culori.oklchToHex(l > 0.5 ? 0.3 : 0.7, c, h);
      suggestions.push({
            color: improved,
            reasoning: "Improved contrast for better accessibility",
            confidence: 0.95,
            category: "primary"
          });
    }
    return {
            suggestions: suggestions,
            analysis: {
              current: currentAnalysis,
              trends: trends,
              alternatives: alternatives
            }
          };
  }
  catch (exn){
    return {
            suggestions: [],
            analysis: {
              current: currentAnalysis,
              trends: [],
              alternatives: alternatives
            }
          };
  }
}

function analyzeColorIntelligence(baseColor) {
  try {
    var color = Culori.parseToOklch(baseColor);
    var oklchCoords = Culori.getOklchCoords(color);
    var l = oklchCoords[0];
    var c = oklchCoords[1];
    var h = oklchCoords[2];
    var score = 50.0;
    var suggestions = [];
    var harmony = [];
    if (c < 0.15) {
      suggestions.push("Consider increasing saturation for better visual impact");
      score = score - 10.0;
    } else if (c > 0.35) {
      suggestions.push("High saturation detected - ensure it works across different backgrounds");
    } else {
      score = score + 15.0;
    }
    if (l < 0.2) {
      suggestions.push("Very dark color - ensure sufficient contrast with dark backgrounds");
    } else if (l > 0.8) {
      suggestions.push("Very light color - ensure sufficient contrast with light backgrounds");
    } else {
      score = score + 15.0;
    }
    if (h >= 0.0 && h < 30.0) {
      harmony.push("Warm red tones - energetic and attention-grabbing");
    } else if (h >= 30.0 && h < 90.0) {
      harmony.push("Yellow-orange tones - optimistic and creative");
    } else if (h >= 90.0 && h < 150.0) {
      harmony.push("Green tones - trustworthy and natural");
    } else if (h >= 150.0 && h < 210.0) {
      harmony.push("Blue tones - professional and calm");
    } else if (h >= 210.0 && h < 270.0) {
      harmony.push("Purple tones - creative and luxurious");
    } else {
      harmony.push("Cool red tones - passionate and bold");
    }
    var accessibilityWhite = validateAccessibility(baseColor, "#FFFFFF", undefined, undefined);
    var accessibilityBlack = validateAccessibility(baseColor, "#000000", undefined, undefined);
    var maxContrast = Math.max(accessibilityWhite.contrast, accessibilityBlack.contrast);
    var accessibility;
    if (maxContrast >= 7.0) {
      score = score + 20.0;
      accessibility = "good";
    } else if (maxContrast >= 4.5) {
      score = score + 10.0;
      suggestions.push("Fair contrast - consider adjusting for better accessibility");
      accessibility = "fair";
    } else {
      suggestions.push("Poor contrast - significantly impacts accessibility");
      accessibility = "poor";
    }
    var finalScore = Math.max(0.0, Math.min(100.0, score));
    return {
            score: finalScore,
            suggestions: suggestions,
            properties: {
              saturation: c,
              lightness: l,
              hue: h,
              accessibility: accessibility,
              harmony: harmony
            }
          };
  }
  catch (exn){
    return {
            score: 0.0,
            suggestions: ["Invalid color format provided"],
            properties: {
              saturation: 0.0,
              lightness: 0.0,
              hue: 0.0,
              accessibility: "poor",
              harmony: []
            }
          };
  }
}

function generateIntelligentPalette(baseColor, optionsOpt, param) {
  var options = optionsOpt !== undefined ? optionsOpt : ({});
  var s = options.style;
  var style = s !== undefined ? s : "professional";
  var s$1 = options.size;
  var size = s$1 !== undefined ? s$1 : 10;
  var analysis = analyzeColorIntelligence(baseColor);
  var suggestions = analysis.suggestions.slice(0);
  try {
    var color = Culori.parseToOklch(baseColor);
    var oklchCoords = Culori.getOklchCoords(color);
    var l = oklchCoords[0];
    var c = oklchCoords[1];
    var h = oklchCoords[2];
    var match = style === "minimal" ? [
        -0.1,
        0.05
      ] : (
        style === "warm" ? [
            0.1,
            0.05
          ] : (
            style === "vibrant" ? [
                0.2,
                0.1
              ] : (
                style === "professional" ? [
                    0.0,
                    0.0
                  ] : [
                    0.05,
                    -0.05
                  ]
              )
          )
      );
    var lightnessAdj = match[1];
    var saturationAdj = match[0];
    var basePalette = PaletteGeneration.generateColorPalette(baseColor, size);
    var adjustedPalette;
    if (basePalette !== undefined) {
      var palette = Caml_option.valFromOption(basePalette);
      if (saturationAdj !== 0.0 || lightnessAdj !== 0.0) {
        var adjusted100;
        try {
          adjusted100 = Culori.oklchToHex(Math.max(0.05, Math.min(0.95, l + lightnessAdj)), Math.max(0.0, c + saturationAdj), h);
        }
        catch (exn){
          adjusted100 = palette[100];
        }
        adjustedPalette = {
          "100": adjusted100,
          "200": palette[200],
          "300": palette[300],
          "400": palette[400],
          "500": baseColor,
          "600": palette[600],
          "700": palette[700],
          "800": palette[800],
          "900": palette[900],
          "1000": palette[1000]
        };
      } else {
        adjustedPalette = Caml_option.some(palette);
      }
    } else {
      adjustedPalette = undefined;
    }
    if (style === "minimal") {
      suggestions.push("Minimal palette created - clean and modern aesthetic");
    } else if (style === "warm") {
      suggestions.push("Warm palette generated - inviting and comfortable feel");
    } else if (style === "vibrant") {
      suggestions.push("Vibrant palette created - great for creative or youth-oriented brands");
    } else if (style === "professional") {
      suggestions.push("Professional palette generated - suitable for corporate environments");
    } else {
      suggestions.push("Cool palette created - fresh and calming atmosphere");
    }
    var finalPalette = adjustedPalette !== undefined ? Caml_option.valFromOption(adjustedPalette) : ({
          "100": baseColor,
          "200": baseColor,
          "300": baseColor,
          "400": baseColor,
          "500": baseColor,
          "600": baseColor,
          "700": baseColor,
          "800": baseColor,
          "900": baseColor,
          "1000": baseColor
        });
    return {
            palette: finalPalette,
            analysis: analysis,
            suggestions: suggestions
          };
  }
  catch (exn$1){
    var fallbackPalette = {
      "100": baseColor,
      "200": baseColor,
      "300": baseColor,
      "400": baseColor,
      "500": baseColor,
      "600": baseColor,
      "700": baseColor,
      "800": baseColor,
      "900": baseColor,
      "1000": baseColor
    };
    return {
            palette: fallbackPalette,
            analysis: analysis,
            suggestions: Belt_Array.concat(suggestions, ["Error generating palette - using fallback"])
          };
  }
}

function generateColorPaletteEnhanced(baseColor, accessibilityOpt, param) {
  try {
    var color = Culori.parseToOklch(baseColor);
    var oklchCoords = Culori.getOklchCoords(color);
    var c = oklchCoords[1];
    var h = oklchCoords[2];
    var lightnessScale = [
      0.95,
      0.85,
      0.75,
      0.65,
      0.55,
      0.45,
      0.35,
      0.25,
      0.15,
      0.05
    ];
    var colors = Belt_Array.mapWithIndex(lightnessScale, (function (index, lightness) {
            try {
              return Culori.oklchToHex(lightness, c, h);
            }
            catch (exn){
              return baseColor;
            }
          }));
    return {
            "100": colors[0],
            "200": colors[1],
            "300": colors[2],
            "400": colors[3],
            "500": colors[4],
            "600": colors[5],
            "700": colors[6],
            "800": colors[7],
            "900": colors[8],
            "1000": colors[9]
          };
  }
  catch (exn){
    return ;
  }
}

function generateHarmoniousPaletteEnhanced(baseColor, harmonyOpt, param) {
  var harmony = harmonyOpt !== undefined ? harmonyOpt : "analogous";
  try {
    var color = Culori.parseToOklch(baseColor);
    var oklchCoords = Culori.getOklchCoords(color);
    var l = oklchCoords[0];
    var c = oklchCoords[1];
    var h = oklchCoords[2];
    if (harmony === "analogous") {
      var color1 = Culori.oklchToHex(l, c, (h - 30.0) % 360.0);
      var color2 = Culori.oklchToHex(l, c, h);
      var color3 = Culori.oklchToHex(l, c, (h + 30.0) % 360.0);
      var color4 = Culori.oklchToHex(l * 0.8, c, (h + 15.0) % 360.0);
      var color5 = Culori.oklchToHex(l * 1.2, c, (h - 15.0) % 360.0);
      return [
              color1,
              color2,
              color3,
              color4,
              color5
            ];
    }
    if (harmony === "triadic") {
      var triadic1 = Culori.oklchToHex(l, c, (h + 120.0) % 360.0);
      var triadic2 = Culori.oklchToHex(l, c, (h + 240.0) % 360.0);
      return [
              baseColor,
              triadic1,
              triadic2
            ];
    }
    if (harmony === "monochromatic") {
      var lighter1 = Culori.oklchToHex(Math.min(0.95, l + 0.2), c * 0.8, h);
      var lighter2 = Culori.oklchToHex(Math.min(0.95, l + 0.1), c * 0.9, h);
      var darker1 = Culori.oklchToHex(Math.max(0.05, l - 0.1), c * 0.9, h);
      var darker2 = Culori.oklchToHex(Math.max(0.05, l - 0.2), c * 0.8, h);
      return [
              lighter1,
              lighter2,
              baseColor,
              darker1,
              darker2
            ];
    }
    var complementary = Culori.oklchToHex(l, c, (h + 180.0) % 360.0);
    return [
            baseColor,
            complementary
          ];
  }
  catch (exn){
    return [baseColor];
  }
}

export {
  hexToRgb ,
  padHex ,
  rgbToHex ,
  analyzeColorAI ,
  generateHarmonyPalette ,
  validateAccessibility ,
  generateAccessibleCombination ,
  generateSemanticColorsAI ,
  suggestBrandColorsAI ,
  analyzeColorIntelligence ,
  generateIntelligentPalette ,
  generateColorPaletteEnhanced ,
  generateHarmoniousPaletteEnhanced ,
}
/* Culori Not a pure module */
