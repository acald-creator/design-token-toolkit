// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_array from "rescript/lib/es6/js_array.js";

function private_rgbToLab(color) {
  var toLinear = function (c) {
    if (c <= 0.03928) {
      return c / 12.92;
    } else {
      return Math.pow((c + 0.055) / 1.055, 2.4);
    }
  };
  var rLinear = toLinear(color.r / 255.0);
  var gLinear = toLinear(color.g / 255.0);
  var bLinear = toLinear(color.b / 255.0);
  var x = rLinear * 0.4124564 + gLinear * 0.3575761 + bLinear * 0.1804375;
  var y = rLinear * 0.2126729 + gLinear * 0.7151522 + bLinear * 0.0721750;
  var z = rLinear * 0.0193339 + gLinear * 0.1191920 + bLinear * 0.9503041;
  var xn = x / 0.95047;
  var yn = y / 1.00000;
  var zn = z / 1.08883;
  var fTransform = function (t) {
    if (t > 0.008856) {
      return Math.pow(t, 1.0 / 3.0);
    } else {
      return 7.787 * t + 16.0 / 116.0;
    }
  };
  var fx = fTransform(xn);
  var fy = fTransform(yn);
  var fz = fTransform(zn);
  return {
          l: 116.0 * fy - 16.0,
          a: 500.0 * (fx - fy),
          b: 200.0 * (fy - fz)
        };
}

function deltaE(color1, color2) {
  var lab1 = private_rgbToLab(color1);
  var lab2 = private_rgbToLab(color2);
  var deltaL = lab1.l - lab2.l;
  var deltaA = lab1.a - lab2.a;
  var deltaB = lab1.b - lab2.b;
  return Math.sqrt(deltaL * deltaL + deltaA * deltaA + deltaB * deltaB);
}

function contrastRatio(color1, color2) {
  var relativeLuminance = function (color) {
    var toLinear = function (c) {
      var normalized = c / 255.0;
      if (normalized <= 0.03928) {
        return normalized / 12.92;
      } else {
        return Math.pow((normalized + 0.055) / 1.055, 2.4);
      }
    };
    var r = toLinear(color.r);
    var g = toLinear(color.g);
    var b = toLinear(color.b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  };
  var lum1 = relativeLuminance(color1);
  var lum2 = relativeLuminance(color2);
  var lighter = Math.max(lum1, lum2);
  var darker = Math.min(lum1, lum2);
  return (lighter + 0.05) / (darker + 0.05);
}

function simulateColorBlindness(color, blindnessType) {
  var applyMatrix = function (r, g, b, matrix) {
    var row0 = matrix[0];
    var row1 = matrix[1];
    var row2 = matrix[2];
    return {
            r: r * row0[0] + g * row0[1] + b * row0[2],
            g: r * row1[0] + g * row1[1] + b * row1[2],
            b: r * row2[0] + g * row2[1] + b * row2[2]
          };
  };
  switch (blindnessType) {
    case "Protanopia" :
        return applyMatrix(color.r, color.g, color.b, [
                    [
                      0.567,
                      0.433,
                      0.0
                    ],
                    [
                      0.558,
                      0.442,
                      0.0
                    ],
                    [
                      0.0,
                      0.242,
                      0.758
                    ]
                  ]);
    case "Deuteranopia" :
        return applyMatrix(color.r, color.g, color.b, [
                    [
                      0.625,
                      0.375,
                      0.0
                    ],
                    [
                      0.7,
                      0.3,
                      0.0
                    ],
                    [
                      0.0,
                      0.3,
                      0.7
                    ]
                  ]);
    case "Tritanopia" :
        return applyMatrix(color.r, color.g, color.b, [
                    [
                      0.95,
                      0.05,
                      0.0
                    ],
                    [
                      0.0,
                      0.433,
                      0.567
                    ],
                    [
                      0.0,
                      0.475,
                      0.525
                    ]
                  ]);
    case "Normal" :
        return color;
    
  }
}

function areColorsDistinguishable(color1, color2, minimumDeltaEOpt, minimumContrastOpt) {
  var minimumDeltaE = minimumDeltaEOpt !== undefined ? minimumDeltaEOpt : 10.0;
  var minimumContrast = minimumContrastOpt !== undefined ? minimumContrastOpt : 3.0;
  var deltaEValue = deltaE(color1, color2);
  var contrastValue = contrastRatio(color1, color2);
  if (deltaEValue >= minimumDeltaE) {
    return contrastValue >= minimumContrast;
  } else {
    return false;
  }
}

function detectHarmony(colors) {
  if (colors.length < 2) {
    return ;
  }
  var rgbToHsl = function (color) {
    var r = color.r / 255.0;
    var g = color.g / 255.0;
    var b = color.b / 255.0;
    var maxVal = Math.max(r, Math.max(g, b));
    var minVal = Math.min(r, Math.min(g, b));
    var diff = maxVal - minVal;
    var l = (maxVal + minVal) / 2.0;
    var s = diff === 0.0 ? 0.0 : (
        l < 0.5 ? diff / (maxVal + minVal) : diff / (2.0 - maxVal - minVal)
      );
    var h;
    if (diff === 0.0) {
      h = 0.0;
    } else if (maxVal === r) {
      var h$1 = (g - b) / diff + (
        g < b ? 6.0 : 0.0
      );
      h = h$1 * 60.0;
    } else if (maxVal === g) {
      var h$2 = (b - r) / diff + 2.0;
      h = h$2 * 60.0;
    } else {
      var h$3 = (r - g) / diff + 4.0;
      h = h$3 * 60.0;
    }
    return {
            h: h,
            s: s,
            l: l
          };
  };
  var hslColors = Js_array.map(rgbToHsl, colors);
  var hues = Js_array.map((function (hsl) {
          return hsl.h;
        }), hslColors);
  if (hues.length !== 2) {
    return ;
  }
  var hueDiff = Math.abs(hues[0] - hues[1]);
  var normalizedDiff = hueDiff > 180.0 ? 360.0 - hueDiff : hueDiff;
  if (normalizedDiff >= 150.0 && normalizedDiff <= 210.0) {
    return "Complementary";
  } else if (normalizedDiff <= 30.0) {
    return "Analogous";
  } else {
    return ;
  }
}

function calculateAccessibilityScore(colors) {
  var colorCount = colors.length;
  if (colorCount < 2) {
    return 50.0;
  }
  var _i = 0;
  var _totalScore = 0.0;
  var _pairCount = 0;
  while(true) {
    var pairCount = _pairCount;
    var totalScore = _totalScore;
    var i = _i;
    if (i >= (colorCount - 1 | 0)) {
      return totalScore / pairCount;
    }
    var calculateInnerPairs = (function(i){
    return function calculateInnerPairs(_j, _currentTotal, _currentCount) {
      while(true) {
        var currentCount = _currentCount;
        var currentTotal = _currentTotal;
        var j = _j;
        if (j >= colorCount) {
          return [
                  currentTotal,
                  currentCount
                ];
        }
        var contrast = contrastRatio(colors[i], colors[j]);
        var deltaEValue = deltaE(colors[i], colors[j]);
        var pairScore = contrast >= 7.0 && deltaEValue >= 15.0 ? 100.0 : (
            contrast >= 4.5 && deltaEValue >= 10.0 ? 80.0 : (
                contrast >= 3.0 && deltaEValue >= 5.0 ? 60.0 : 20.0
              )
          );
        _currentCount = currentCount + 1 | 0;
        _currentTotal = currentTotal + pairScore;
        _j = j + 1 | 0;
        continue ;
      };
    }
    }(i));
    var match = calculateInnerPairs(i + 1 | 0, totalScore, pairCount);
    _pairCount = match[1];
    _totalScore = match[0];
    _i = i + 1 | 0;
    continue ;
  };
}

export {
  private_rgbToLab ,
  deltaE ,
  contrastRatio ,
  simulateColorBlindness ,
  areColorsDistinguishable ,
  detectHarmony ,
  calculateAccessibilityScore ,
}
/* No side effect */
