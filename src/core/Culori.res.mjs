// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Culori from "culori";

function oklch(l, c, h) {
  return {
          mode: "oklch",
          l: l,
          c: c,
          h: h,
          r: undefined,
          g: undefined,
          b: undefined,
          alpha: 1.0
        };
}

function oklchWithAlpha(l, c, h, alpha) {
  return {
          mode: "oklch",
          l: l,
          c: c,
          h: h,
          r: undefined,
          g: undefined,
          b: undefined,
          alpha: alpha
        };
}

function getOklchCoords(color) {
  var oklchColor = Culori.oklch(color);
  var match = oklchColor.l;
  var match$1 = oklchColor.c;
  var match$2 = oklchColor.h;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      if (match$2 !== undefined) {
        return [
                match,
                match$1,
                match$2
              ];
      } else {
        return [
                0.5,
                0.1,
                0.0
              ];
      }
    } else {
      return [
              0.5,
              0.1,
              0.0
            ];
    }
  } else {
    return [
            0.5,
            0.1,
            0.0
          ];
  }
}

function toHex(color) {
  try {
    return Culori.formatHex(color);
  }
  catch (exn){
    return "#000000";
  }
}

function parseToOklch(hexString) {
  return Culori.oklch(Culori.parse(hexString));
}

function oklchToHex(l, c, h) {
  return toHex(oklch(l, c, h));
}

function setOklchLightness(color, lightness) {
  var oklchColor = Culori.oklch(color);
  var match = oklchColor.c;
  var match$1 = oklchColor.h;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return oklch(lightness, match, match$1);
    } else {
      return oklch(lightness, 0.1, 0.0);
    }
  } else {
    return oklch(lightness, 0.1, 0.0);
  }
}

function setOklchChroma(color, chroma) {
  var oklchColor = Culori.oklch(color);
  var match = oklchColor.l;
  var match$1 = oklchColor.h;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return oklch(match, chroma, match$1);
    } else {
      return oklch(0.5, chroma, 0.0);
    }
  } else {
    return oklch(0.5, chroma, 0.0);
  }
}

function setOklchHue(color, hue) {
  var oklchColor = Culori.oklch(color);
  var match = oklchColor.l;
  var match$1 = oklchColor.c;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return oklch(match, match$1, hue);
    } else {
      return oklch(0.5, 0.1, hue);
    }
  } else {
    return oklch(0.5, 0.1, hue);
  }
}

export {
  oklch ,
  oklchWithAlpha ,
  getOklchCoords ,
  toHex ,
  parseToOklch ,
  oklchToHex ,
  setOklchLightness ,
  setOklchChroma ,
  setOklchHue ,
}
/* culori Not a pure module */
